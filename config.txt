# Fitxer de configuració de NEAT
# Més informació en el següent enllaç: 
# https://neat-python.readthedocs.io/en/latest/config_file.html 

# Secció obligatòria que ha de contenir cada fitxer de configuració
[NEAT]                        
# Quan solament un individu d'una generació hagi arribat a un valor de 
# 100 de fitness es para l'algoritme
fitness_criterion     = max   

# Llindar (threshold) del fitness
fitness_threshold     = 100 

# Nombre d'individus en una població
pop_size              = 5         

# Establim que no volem més individus d'una espècie que s'ha extingit
reset_on_extinction   = False       




# Secció per a establir les configuracions d'un genoma
[DefaultGenome]

# Configuracions de les funcions d'activació de les neurones:

# Funció d'activació per defecte que farà servir la xarxa neuronal 
# que controla al genoma
activation_default      = sigmoid

# Probabilitat de canviar-se de funció d'activació (0.5 --> 50%)
activation_mutate_rate  = 0.5

# L'altra funció d'activació que pot elegir la xarxa neuronal
activation_options      = tanh



# Configuracions d'agregació de les neurones:

# Agregació per defecte -> Escollim la suma ponderada (sum)
aggregation_default     = sum 

# Possibilitat de canviar-se d'opció agregació
aggregation_mutate_rate = 0.0      

# Opcions d'agregació que es poden elegir
aggregation_options     = sum     



# Configuracions del bias de les neurones:

# Mitjana inicial de tots els biases d'una xarxa
bias_init_mean          = 0.0      

# Desviació o variabilitat entre els valors dels biases
bias_init_stdev         = 1.0      

# Valor màxim que pot tindre el bias
bias_max_value          = 30.0     

# Valor mínim que pot tindre el bias
bias_min_value          = -30.0    

# Quant de gran o petit canviarà el valor de bias
bias_mutate_power       = 0.5      

# La probabilitat de mutar el bias (0.7 --> 70%)
bias_mutate_rate        = 0.7      

# La possibilitat de reemplaçar el valor del bias per una de nova
bias_replace_rate       = 0.1     



# Configuracions de compatibilitat de dos genomes:

# Fiquem les coses que no existeixen en un genoma a l'altre
compatibility_disjoint_coefficient = 1.0    

# Mesclem els pesos dels dos genomes de manera que els resultats ens sortirà 
# de forma compensada un de l'altre
compatibility_weight_coefficient   = 0.5



# Probabilitat d'agregar o eliminar una connexió:

# Possibilitat d'agregar una connexió (50%)
conn_add_prob           = 0.5  

# Possibilitat d'eliminar una connexió (50%)
conn_delete_prob        = 0.5      



# Configuracions de l'activació de les connexions de la xarxa:

# Estat inicial d'habilitació de les connexions 
# True --> Totes activades / False --> Totes desactivades
enabled_default         = True 

# Probabilitat de canviar l'estat d'una connexió (0.01 --> 1%)
enabled_mutate_rate     = 0.01     

# Establim que el tipus de xarxa neuronal serà de Feedforward
feed_forward            = True     

# Totes les neurones estaran interconnectades / capa entrada -> oculta -> sortida
initial_connection      = full     



# Probabilitat d'agregar o abolir una neurona:

# Possibilitat d'afegir una neurona (0.2 --> 20%)
node_add_prob           = 0.2  

# Possibilitat de suprimir una neurona (0.2 --> 20%)
node_delete_prob        = 0.2     



# Nombre de neurones a cada capa:

# Neurones a la capa oculta
num_hidden              = 0   

# Neurones a la capa d'entrada
num_inputs              = 3    

# Neurones a la capa de sortida 
num_outputs             = 1       



# Configuracions de la resposta -> activació(bias + (resposta ∗ suma ponderada)):

# Mitjana inicial de totes les respostes
response_init_mean      = 1.0    

# Desviació o variabilitat entre els valors de les respostes
response_init_stdev     = 0.0     

# Valor màxim de la resposta
response_max_value      = 1.0   

# Valor mínim de la resposta
response_min_value      = 1.0 

# Quant de gran o petit canviarà el valor de la resposta
response_mutate_power   = 0.0       

# La probabilitat de mutar el valor de la resposta 
response_mutate_rate    = 0.0   

# La possibilitat de reemplaçar el valor de la resposta per una de nova
response_replace_rate   = 0.0      



# Configuracions del pes de la connexió:

# Mitjana inicial de tots els pesos
weight_init_mean        = 0.0    

# Desviació o variabilitat entre els valors dels pesos
weight_init_stdev       = 1.0      

# Valor màxim que pot tindre el pes
weight_max_value        = 30.0       

# Valor mínim que pot tindre el pes
weight_min_value        = -30.0      

# Quant de gran o petit canviarà els valors dels pesos 
weight_mutate_power     = 0.5 

# Probabilitat de mutació en els valors dels pesos
weight_mutate_rate      = 0.8     

# Possibilitat de reemplaçar el valor d'un pes per un altre de nou 
weight_replace_rate     = 0.1        




# Secció per a especificar les configuracions de les espècies:
[DefaultSpeciesSet]

# Establim un llindar perquè l'algoritme sàpiga quan un individu 
# pertany a una espècie o a una altra
compatibility_threshold = 3.0        




# Secció que ens serveix per a solucionar l'estancament en l'evolució de 
# les generacions
[DefaultStagnation]

# S'escollirà els individus que tinguin un major fitness (max)
species_fitness_func = max

# Nombre de generacions que permetem a l'hora quan hi hagi un estancament
max_stagnation       = 5

# Nombre d'espècies que es guardaran de l'estancament
species_elitism      = 2            




# Secció que ens ajudarà per a elegir els millors individus i la probabilitat que
# tenen de passar a la següent població
[DefaultReproduction]

# Nombre dels millors individus que passaran a la següent generació sense canvis
elitism            = 2      

# La probabilitat que hi ha que els millors individus passin a la següent població
survival_threshold = 0.2            